Index: src/main/ui/BudgetApp.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package ui;\r\n\r\nimport model.Category;\r\nimport model.Graph;\r\nimport model.Purchase;\r\nimport model.User;\r\n\r\nimport java.util.Scanner;\r\n\r\n// Budget application\r\n// used the TellerApp as reference for making the UI\r\npublic class BudgetApp {\r\n    private Graph mainGraph;\r\n    private User mainUser;\r\n    private Category category1;\r\n    private Category category2;\r\n    private Category category3;\r\n    private Scanner input;\r\n\r\n    // EFFECTS: runs the budget application\r\n    public BudgetApp() {\r\n        runBudget();\r\n    }\r\n\r\n    // MODIFIES: this\r\n    // EFFECTS; processes user input\r\n    private void runBudget() {\r\n        boolean keepGoing = true;\r\n        String command = null;\r\n\r\n        init();\r\n\r\n        while (keepGoing) {\r\n            displayMenu();\r\n            command = input.next();\r\n            command = command.toLowerCase();\r\n\r\n            if (command.equals(\"q\")) {\r\n                keepGoing = false;\r\n            } else {\r\n                processCommand(command);\r\n            }\r\n        }\r\n\r\n        System.out.println(\"\\nHave a good day!\");\r\n    }\r\n\r\n    // MODIFIES: this\r\n    // EFFECTS: processes user command\r\n    private void processCommand(String command) {\r\n        if (command.equals(\"c\")) {\r\n            runCategory();\r\n        } else if (command.equals(\"g\")) {\r\n            runGraph();\r\n        } else if (command.equals(\"u\")) {\r\n            runUser();\r\n        } else {\r\n            System.out.println(\"Please select a valid option...\");\r\n        }\r\n    }\r\n\r\n    // MODIFIES: this\r\n    // EFFECTS: initializes main\r\n    private void init() {\r\n        mainGraph = new Graph();\r\n        mainUser = new User(0, \"unnamed\");\r\n        category1 = new Category(\"Food\", 0);\r\n        category2 = new Category(\"Transport\", 0);\r\n        category3 = new Category(\"Fun\", 0);\r\n        mainGraph.addCategory(category1);\r\n        mainGraph.addCategory(category2);\r\n        mainGraph.addCategory(category3);\r\n\r\n        input = new Scanner(System.in);\r\n        input.useDelimiter(\"\\n\");\r\n    }\r\n\r\n    // MODIFIES: this\r\n    // EFFECTS: initializes user\r\n    private void initUser() {\r\n        input = new Scanner(System.in);\r\n        input.useDelimiter(\"\\n\");\r\n    }\r\n\r\n    // MODIFIES: this\r\n    // EFFECTS: initializes graph\r\n    private void initGraph() {\r\n        input = new Scanner(System.in);\r\n        input.useDelimiter(\"\\n\");\r\n    }\r\n\r\n    // MODIFIES: this\r\n    // EFFECTS: initializes category\r\n    private void initCategory() {\r\n        input = new Scanner(System.in);\r\n        input.useDelimiter(\"\\n\");\r\n    }\r\n\r\n    // EFFECTS: displays menu of options to user\r\n    private void displayMenu() {\r\n        System.out.println(\"\\nSelect what you want to do:\");\r\n        System.out.println(\"\\tc -> categories\");\r\n        System.out.println(\"\\tg -> graph\");\r\n        System.out.println(\"\\tu -> user\");\r\n        System.out.println(\"\\tq -> quit\");\r\n    }\r\n\r\n    // MODIFIES: this\r\n    // EFFECTS: lets you update user\r\n    private void runUser() {\r\n        boolean keepGoing = true;\r\n        String command = null;\r\n\r\n        initUser();\r\n\r\n        while (keepGoing) {\r\n            userMenu();\r\n            command = input.next();\r\n            command = command.toLowerCase();\r\n\r\n            if (command.equals(\"q\")) {\r\n                keepGoing = false;\r\n            } else {\r\n                processUserCommand(command);\r\n            }\r\n        }\r\n    }\r\n\r\n    // MODIFIES: this\r\n    // EFFECTS: process command for user setting\r\n    private void processUserCommand(String command) {\r\n        if (command.equals(\"n\")) {\r\n            newUser();\r\n        } else if (command.equals(\"+\")) {\r\n            increaseUser();\r\n        } else if (command.equals(\"-\")) {\r\n            decreaseUser();\r\n        } else {\r\n            System.out.println(\"Please select a valid option...\");\r\n        }\r\n    }\r\n\r\n    // MODIFIES: this\r\n    // EFFECTS: lets you update user\r\n    private void userMenu() {\r\n        System.out.println(\"\\nSelect what you want to do:\");\r\n        System.out.println(\"\\tn -> new user\");\r\n        System.out.println(\"\\t+ -> increase budget\");\r\n        System.out.println(\"\\t- -> decrease budget\");\r\n        System.out.println(\"\\tq -> quit to main menu\");\r\n    }\r\n\r\n    // MODIFIES: this\r\n    // EFFECTS: lets you make new user\r\n    private void newUser() {\r\n        System.out.println(\"\\nIncome?\");\r\n        double income = input.nextDouble();\r\n\r\n        System.out.println(\"\\nNew user name?\");\r\n        input.nextLine();\r\n        String name = input.nextLine();\r\n\r\n        mainUser.renameUser(name);\r\n        mainUser.increaseMoney(income);\r\n\r\n        System.out.println(\"\\nHello \" + name);\r\n        printIncome(mainUser);\r\n    }\r\n\r\n    // MODIFIES: this\r\n    // EFFECTS: lets you increase user income\r\n    private void increaseUser() {\r\n        System.out.println(\"\\nHow much do you want to increase budget by?\");\r\n        double income = input.nextDouble();\r\n        System.out.println(mainUser.increaseMoney(income));\r\n        printIncome(mainUser);\r\n    }\r\n\r\n    // MODIFIES: this\r\n    // EFFECTS: lets you decrease user income\r\n    private void decreaseUser() {\r\n        System.out.println(\"How much do you want to decrease budget by?\");\r\n        double income = input.nextDouble();\r\n        System.out.println(mainUser.decreaseMoney(income, mainGraph));\r\n        printIncome(mainUser);\r\n    }\r\n\r\n    // EFFECTS: prints user income to screen\r\n    private void printIncome(User user) {\r\n        System.out.println(\"Budget: \" + user.getIncome());\r\n    }\r\n\r\n    // MODIFIES: this\r\n    // EFFECTS: lets you run graph setting\r\n    private void runGraph() {\r\n        boolean keepGoing = true;\r\n        String command = null;\r\n\r\n        initGraph();\r\n\r\n        while (keepGoing) {\r\n            graphMenu();\r\n            command = input.next();\r\n            command = command.toLowerCase();\r\n\r\n            if (command.equals(\"q\")) {\r\n                keepGoing = false;\r\n            } else {\r\n                processGraphCommand(command);\r\n            }\r\n        }\r\n    }\r\n\r\n    // MODIFIES: this\r\n    // EFFECTS: process command for graph setting\r\n    private void processGraphCommand(String command) {\r\n        if (command.equals(\"u\")) {\r\n            checkTotalGraph();\r\n        } else {\r\n            System.out.println(\"Please select a valid option...\");\r\n        }\r\n    }\r\n\r\n    // MODIFIES: this\r\n    // EFFECTS: menu for graph setting\r\n    private void graphMenu() {\r\n        System.out.println(\"\\nSelect what you want to do:\");\r\n        System.out.println(\"\\tu -> check total spent\");\r\n        System.out.println(\"\\tq -> quit to main menu\");\r\n    }\r\n\r\n    // EFFECTS: lets you see total spending by user\r\n    private void checkTotalGraph() {\r\n        mainGraph.resetUltimateSpent();\r\n        mainGraph.determineUltimateSpent();\r\n        System.out.println(mainGraph.ultimateSpentMessage(mainUser));\r\n    }\r\n\r\n    // MODIFIES: this\r\n    // EFFECTS: lets you update category\r\n    private void runCategory() {\r\n        boolean keepGoing = true;\r\n        String command = null;\r\n\r\n        initCategory();\r\n\r\n        while (keepGoing) {\r\n            categoryMenu();\r\n            command = input.next();\r\n            command = command.toLowerCase();\r\n\r\n            if (command.equals(\"q\")) {\r\n                keepGoing = false;\r\n            } else {\r\n                processCategoryCommand(command);\r\n            }\r\n        }\r\n    }\r\n\r\n    // MODIFIES: this\r\n    // EFFECTS: process command for category setting\r\n    private void processCategoryCommand(String command) {\r\n        if (command.equals(\"a\")) {\r\n            addPurchase();\r\n        } else {\r\n            System.out.println(\"Please select a valid option...\");\r\n        }\r\n    }\r\n\r\n    // MODIFIES: this\r\n    // EFFECTS: menu for category setting\r\n    private void categoryMenu() {\r\n        System.out.println(\"\\nSelect what you want to do:\");\r\n        System.out.println(\"\\ta -> add purchase\");\r\n        System.out.println(\"\\tq -> quit to main menu\");\r\n    }\r\n\r\n    // EFFECTS: prompts user to select category they want to edit and returns it\r\n    private Category selectCategory() {\r\n        String selection = \"\"; // force entry into loop\r\n\r\n        while (!(selection.equals(\"f\") || selection.equals(\"t\") || selection.equals(\"!\"))) {\r\n            System.out.println(\"press f for food\");\r\n            System.out.println(\"press t for transport\");\r\n            System.out.println(\"press ! for fun\");\r\n            selection = input.next();\r\n            selection = selection.toLowerCase();\r\n        }\r\n\r\n        if (selection.equals(\"f\")) {\r\n            return category1;\r\n        } else if (selection.equals(\"t\")) {\r\n            return category2;\r\n        } else {\r\n            return category3;\r\n        }\r\n    }\r\n\r\n    // MODIFIES: this\r\n    // EFFECTS: adds purchase to given category\r\n    private void addPurchase() {\r\n        Category selected = selectCategory();\r\n        System.out.println(\"\\nCost?\");\r\n        double cost = input.nextDouble();\r\n\r\n        System.out.println(\"\\nName of purchase?\");\r\n        input.nextLine();\r\n        String name = input.nextLine();\r\n\r\n        Purchase purchase = new Purchase(name, cost);\r\n        System.out.println(selected.addPurchase(purchase));\r\n        selected.resetTotalSpent();\r\n        selected.updateCategory(mainUser);\r\n        printCategory(selected);\r\n    }\r\n\r\n    // EFFECTS: prints the category to the screen\r\n    private void printCategory(Category selected) {\r\n        System.out.println(\"Purchased items in \" + selected.getName() + \" category:\");\r\n        System.out.println(\" \");\r\n        for (Purchase purchase : selected.getListPurchases()) {\r\n            System.out.println(\"-\" + \" \" + purchase.getName() + \"  $\" + purchase.getCost());\r\n        }\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/ui/BudgetApp.java b/src/main/ui/BudgetApp.java
--- a/src/main/ui/BudgetApp.java	(revision b9d19e2e42c9b0e1d148599d89382dc0867ea1be)
+++ b/src/main/ui/BudgetApp.java	(date 1658875651195)
@@ -5,6 +5,7 @@
 import model.Purchase;
 import model.User;
 
+import java.util.List;
 import java.util.Scanner;
 
 // Budget application
@@ -16,6 +17,7 @@
     private Category category2;
     private Category category3;
     private Scanner input;
+    private List<Category> newCategory;
 
     // EFFECTS: runs the budget application
     public BudgetApp() {
@@ -67,6 +69,7 @@
         category1 = new Category("Food", 0);
         category2 = new Category("Transport", 0);
         category3 = new Category("Fun", 0);
+        // newCategory = new List<Category>
         mainGraph.addCategory(category1);
         mainGraph.addCategory(category2);
         mainGraph.addCategory(category3);
